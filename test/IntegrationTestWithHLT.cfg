process HLT  = 
{

    # The number of events to be processed.
    untracked PSet maxEvents = {untracked int32 input = 10}
    
    service =  RandomNumberGeneratorService {
	# This is to initialize the random engine of the source
	untracked uint32 sourceSeed = 123456789
	# This is to initialize the random engines of Famos
	PSet moduleSeeds =
	{
	    untracked uint32 VtxSmeared = 123456789
	    untracked uint32 famosPileUp = 918273
	    untracked uint32 famosSimHits = 13579
	    untracked uint32 siTrackerGaussianSmearingRecHits = 24680
	    untracked uint32 caloRecHits = 654321
	    untracked uint32 paramMuons = 54525
	    untracked uint32 l1ParamMuons = 54525
	    untracked uint32 MuonSimHits = 97531
	    untracked uint32 muonDTDigis = 67673876
	    untracked uint32 muonCSCDigis = 525432
	    untracked uint32 muonRPCDigis = 524964
	}
    }
    
    // If you want to use the (CMS default) CLHEP random, 
    // set these ones to false
    replace famosPileUp.UseTRandomEngine = true
    replace famosSimHits.UseTRandomEngine = true
    replace siTrackerGaussianSmearingRecHits.UseTRandomEngine = true
    replace caloRecHits.UseTRandomEngine = true
    replace paramMuons.UseTRandomEngine = true

    # Generate ttbar events
    include "FastSimulation/Configuration/data/ttbar.cfi"
     
    # Famos sequences (With HLT)
    include "FastSimulation/Configuration/data/CommonInputs.cff"
    include "FastSimulation/Configuration/data/FamosSequences.cff"
    include "FastSimulation/HighLevelTrigger/data/common/HLTSetup.cff"

    // If you want to turn on/off pile-up
    replace famosPileUp.PileUpSimulator.averageNumber = 0.0
    // Parametrized magnetic field
    replace VolumeBasedMagneticFieldESProducer.useParametrizedTrackerField = true
    // You may not want to simulate everything for your study
    replace famosSimHits.SimulateCalorimetry = true
    replace famosSimHits.SimulateTracking = true

    // Apply ECAL miscalibration (ideal calibration though) and HCAL miscalibration
    replace caloRecHits.RecHitsFactory.doMiscalib=true
    replace ecalConditions.toGet = {
	{ string record = "EcalPedestalsRcd"
	    string tag = "EcalPedestals_trivial" },
	{ string record = "EcalADCToGeVConstantRcd"
	    string tag = "EcalADCToGeVConstant_trivial" },
	{ string record = "EcalGainRatiosRcd"
	    string tag = "EcalGainRatios_trivial" },
	{ string record = "EcalIntercalibConstantsRcd"
	    string tag = "EcalIntercalibConstants_trivial" },
	{ string record = "EcalWeightXtalGroupsRcd"
	    string tag = "EcalWeightXtalGroups_trivial" },
	{ string record = "EcalTBWeightsRcd"
	    string tag = "EcalTBWeights_trivial" },
	{ string record = "EcalLaserAlphasRcd" 
	    string tag = "EcalLaserAlphas_trivial" },
	{ string record = "EcalLaserAPDPNRatiosRcd" 
	    string tag = "EcalLaserAPDPNRatios_trivial" },
	{ string record = "EcalLaserAPDPNRatiosRefRcd" 
	    string tag = "EcalLaserAPDPNRatiosRef_trivial" }
    }

    // Apply Tracker misalignment (ideal alignment though)
    replace famosSimHits.ApplyAlignment = true
    replace misalignedTrackerGeometry.applyAlignment = true
    replace trackerAlignment.toGet = {
        { string record = "TrackerAlignmentRcd"      string tag = "TrackerIdealGeometry170" },
        { string record = "TrackerAlignmentErrorRcd" string tag = "TrackerIdealGeometryErrors170" }
    }

    // Apply HCAL miscalibration (not ideal in that case)
    replace caloRecHits.RecHitsFactory.HCAL.Refactor = 1.0
    replace caloRecHits.RecHitsFactory.HCAL.Refactor_mean = 0.95


    service = Timing { }

    # Simulation
    sequence simulation = { simulationWithFamos }

    # L1 Emulator and HLT Setup
    include "FastSimulation/HighLevelTrigger/data/common/HLTSetup.cff"
    /*
    // prescale factors at L1 : useful for testing all L1 paths, but commented by default
    replace l1GtFactors.PrescaleFactors = {
	1,       1,       1,       1,       1,       1,       1,       1,       1,       1,
	1,       1,       1,       1,       1,       1,       1,       1,       1,       1,
	1,       1,       1,       1,       1,       1,       1,       1,       1,       1,
	1,       1,       1,       1,       1,       1,       1,       1,       1,       1,
	1,       1,       1,       1,       1,       1,       1,       1,       1,       1,
	1,       1,       1,       1,       1,       1,       1,       1,       1,       1,
	1,       1,       1,       1,       1,       1,       1,       1,       1,       1,
	1,       1,       1,       1,       1,       1,       1,       1,       1,       1,
	1,       1,       1,       1,       1,       1,       1,       1,       1,       1,
	1,       1,       1,       1,       1,       1,       1,       1,       1,       1,
	1,       1,       1,       1,       1,       1,       1,       1,       1,       1,
	1,       1,       1,       1,       1,       1,       1,       1,       1,       1,
	1,       1,       1,       1,       1,       1,       1,       1
    }
    */

    # Reconstruction of events passing the HLT filters:
    sequence hltEnd = { 	
	doCalo & towerMakerForAll & // Work-around because of a bug in HLT 
	reconstructionWithFamos // Reconstruction sequence
    }
    # Reconstruction of all events, including those rejected at L1/HLT
    # sequence hltEnd = { dummyModule }

    # HLT paths
    include "HLTrigger/Configuration/data/main/HLTpaths.cff"

    # Note : if your process is not called HLT, you have to change that! 
    #replace hltTrigReport.HLTriggerResults = TriggerResults::PROD
    #replace hltHighLevel.TriggerResultsTag = TriggerResults::PROD 

    # Reconstruction of all events, including those rejected at L1/HLT
    /* 
    path reconstruction = { 
	doCalo & towerMakerForAll & // Work-around because of a bug in HLT 
	reconstructionWithFamos // Reconstruction sequence
    }
    */
 
    # To write out events 
    include "FastSimulation/Configuration/data/EventContent.cff"
    module o1 = PoolOutputModule { 
	using AODSIMEventContent
	untracked string fileName = "AODIntegrationTestWithHLT.root" 
    }
    endpath outpath = { o1 }
    
    # Keep the logging output to a nice level #
    include "FWCore/MessageService/data/MessageLogger.cfi"
    replace MessageLogger.destinations = {"detailedInfo.txt"}
    
}		
